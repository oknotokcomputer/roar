// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.9
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `spaced.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spaced.SetProjectIdReply)
pub struct SetProjectIdReply {
    // message fields
    // @@protoc_insertion_point(field:spaced.SetProjectIdReply.success)
    pub success: bool,
    // @@protoc_insertion_point(field:spaced.SetProjectIdReply.error)
    pub error: i32,
    // special fields
    // @@protoc_insertion_point(special_field:spaced.SetProjectIdReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetProjectIdReply {
    fn default() -> &'a SetProjectIdReply {
        <SetProjectIdReply as ::protobuf::Message>::default_instance()
    }
}

impl SetProjectIdReply {
    pub fn new() -> SetProjectIdReply {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SetProjectIdReply {
    const NAME: &'static str = "SetProjectIdReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                16 => {
                    self.error = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        if self.error != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        if self.error != 0 {
            os.write_int32(2, self.error)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetProjectIdReply {
        SetProjectIdReply::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.error = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetProjectIdReply {
        static instance: SetProjectIdReply = SetProjectIdReply {
            success: false,
            error: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spaced.SetProjectInheritanceFlagReply)
pub struct SetProjectInheritanceFlagReply {
    // message fields
    // @@protoc_insertion_point(field:spaced.SetProjectInheritanceFlagReply.success)
    pub success: bool,
    // @@protoc_insertion_point(field:spaced.SetProjectInheritanceFlagReply.error)
    pub error: i32,
    // special fields
    // @@protoc_insertion_point(special_field:spaced.SetProjectInheritanceFlagReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetProjectInheritanceFlagReply {
    fn default() -> &'a SetProjectInheritanceFlagReply {
        <SetProjectInheritanceFlagReply as ::protobuf::Message>::default_instance()
    }
}

impl SetProjectInheritanceFlagReply {
    pub fn new() -> SetProjectInheritanceFlagReply {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SetProjectInheritanceFlagReply {
    const NAME: &'static str = "SetProjectInheritanceFlagReply";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                16 => {
                    self.error = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        if self.error != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        if self.error != 0 {
            os.write_int32(2, self.error)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetProjectInheritanceFlagReply {
        SetProjectInheritanceFlagReply::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.error = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetProjectInheritanceFlagReply {
        static instance: SetProjectInheritanceFlagReply = SetProjectInheritanceFlagReply {
            success: false,
            error: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:spaced.StatefulDiskSpaceUpdate)
pub struct StatefulDiskSpaceUpdate {
    // message fields
    // @@protoc_insertion_point(field:spaced.StatefulDiskSpaceUpdate.state)
    pub state: ::protobuf::EnumOrUnknown<StatefulDiskSpaceState>,
    // @@protoc_insertion_point(field:spaced.StatefulDiskSpaceUpdate.free_space_bytes)
    pub free_space_bytes: i64,
    // special fields
    // @@protoc_insertion_point(special_field:spaced.StatefulDiskSpaceUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatefulDiskSpaceUpdate {
    fn default() -> &'a StatefulDiskSpaceUpdate {
        <StatefulDiskSpaceUpdate as ::protobuf::Message>::default_instance()
    }
}

impl StatefulDiskSpaceUpdate {
    pub fn new() -> StatefulDiskSpaceUpdate {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StatefulDiskSpaceUpdate {
    const NAME: &'static str = "StatefulDiskSpaceUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.free_space_bytes = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(StatefulDiskSpaceState::NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if self.free_space_bytes != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.free_space_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(StatefulDiskSpaceState::NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.free_space_bytes != 0 {
            os.write_int64(2, self.free_space_bytes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatefulDiskSpaceUpdate {
        StatefulDiskSpaceUpdate::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(StatefulDiskSpaceState::NONE);
        self.free_space_bytes = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatefulDiskSpaceUpdate {
        static instance: StatefulDiskSpaceUpdate = StatefulDiskSpaceUpdate {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            free_space_bytes: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:spaced.StatefulDiskSpaceState)
pub enum StatefulDiskSpaceState {
    // @@protoc_insertion_point(enum_value:spaced.StatefulDiskSpaceState.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:spaced.StatefulDiskSpaceState.NORMAL)
    NORMAL = 1,
    // @@protoc_insertion_point(enum_value:spaced.StatefulDiskSpaceState.LOW)
    LOW = 2,
    // @@protoc_insertion_point(enum_value:spaced.StatefulDiskSpaceState.CRITICAL)
    CRITICAL = 3,
}

impl ::protobuf::Enum for StatefulDiskSpaceState {
    const NAME: &'static str = "StatefulDiskSpaceState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StatefulDiskSpaceState> {
        match value {
            0 => ::std::option::Option::Some(StatefulDiskSpaceState::NONE),
            1 => ::std::option::Option::Some(StatefulDiskSpaceState::NORMAL),
            2 => ::std::option::Option::Some(StatefulDiskSpaceState::LOW),
            3 => ::std::option::Option::Some(StatefulDiskSpaceState::CRITICAL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [StatefulDiskSpaceState] = &[
        StatefulDiskSpaceState::NONE,
        StatefulDiskSpaceState::NORMAL,
        StatefulDiskSpaceState::LOW,
        StatefulDiskSpaceState::CRITICAL,
    ];
}

impl ::std::default::Default for StatefulDiskSpaceState {
    fn default() -> Self {
        StatefulDiskSpaceState::NONE
    }
}

